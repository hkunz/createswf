option(USE_CCACHE "Use ccache" ON)
option(VERBOSE "Print debug information" OFF)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_LIST_DIR})

message(STATUS "cmake path: ${CMAKE_CURRENT_SOURCE_DIR}")
if (${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows")
	include("${CMAKE_CURRENT_LIST_DIR}/toolchains/windows.cmake")
elseif (${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Darwin")
	include("${CMAKE_CURRENT_LIST_DIR}/toolchains/darwin.cmake")
elseif (${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Linux")
	include("${CMAKE_CURRENT_LIST_DIR}/toolchains/linux.cmake")
endif()

if (NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Compile Type" FORCE)
endif()
set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release)

set(ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR} CACHE STRING "Root dir")
message(STATUS "Place binaries in ${ROOT_DIR}")
# First for the generic no-config case (e.g. with mingw)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${ROOT_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/lib)

# Second, for multi-config builds (e.g. msvc)
foreach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
	string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${ROOT_DIR})
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/lib)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/lib)
endforeach()

set(CMAKE_AUTOGEN_TARGETS_FOLDER "${ROOT_DIR}/.moc")
set(CMAKE_AUTOMOC_TARGETS_FOLDER "${ROOT_DIR}/.moc")
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_VERBOSE_MAKEFILE ${VERBOSE})
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if (${CMAKE_EXTRA_GENERATOR} MATCHES "Eclipse CDT4")
	set(CMAKE_CXX_COMPILER_ARG1 -std=c++11)
	set(CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES OFF)
	set(CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT TRUE)
	set(CMAKE_ECLIPSE_VERSION 4.2)
endif()

find_program(CCACHE "ccache")
if (CCACHE)
	if (USE_CCACHE)
		message(STATUS "Using ccache")
		set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ${CCACHE})
		set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE})
	endif()
else()
	message(WARNING "ccache not found")
endif()
